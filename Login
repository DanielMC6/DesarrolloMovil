using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace DocentesApp
{
    public class Login : ContentPage
    {

        //Logo
        Image logoUtap,Atras;

        //Bienvenidos
        Label labelBienvenidos,
              OlvidarContraseña;

        //Campos
        Entry Documento, Codigo, Contraseña;

        //Gestos
        TapGestureRecognizer TapOlvidarContrasena;

        //gestoImagenAtras
        TapGestureRecognizer ImagenAtras;


        //Boton
        Button AccesoApp;

        //Cajas 
        BoxView Fondo, circulo;

        //Transicion
        PaginaPricipal PaginaPricipal;

        StackLayout Contenido;

        RelativeLayout contenedorLogin;

        public Login()
        {
            NavigationPage.SetHasNavigationBar(this, false);

            CrearVistas();
            AgregarVistas();
            AgregarEventos();
        }

        void CrearVistas()
        {
            PaginaPricipal = new PaginaPricipal
            {

                TranslationX = 420
            };

            Atras = new Image
            {
                Source = Imagenes.BotonAtras,
                IsVisible = false

            };

            Fondo = new BoxView
            {
                BackgroundColor = Colores.FondoLogin
            };

            logoUtap = new Image
            {
                Source = Imagenes.LogoUtap
            };

            labelBienvenidos = new Label
            {
                Text = "Bienvenidos",
                BackgroundColor = Color.Transparent,
                HorizontalOptions = LayoutOptions.Center,
                TextColor = Colores.BLanco,
                FontSize = Palabras.Texto_Bienvenidos
            };

            Documento = new Entry
            {
                Placeholder = "No. Documento",
                PlaceholderColor = Colores.BLanco,
                FontSize = Palabras.CajasTextoLogin
            };

            Codigo = new Entry
            {
                Placeholder = "Codigo",
                PlaceholderColor = Colores.BLanco,
                FontSize = Palabras.CajasTextoLogin
            };

            Contraseña = new Entry
            {
                Placeholder = "Contraseña",
                PlaceholderColor = Colores.BLanco,
                IsPassword = true,
                FontSize = Palabras.CajasTextoLogin
            };

            AccesoApp = new Button
            {
                Text = "Acceder a la App",
                BackgroundColor = Colores.Boton,
                TextColor = Colores.Negro,
                HorizontalOptions = LayoutOptions.Center,
                VerticalOptions = LayoutOptions.Center
            };

            OlvidarContraseña = new Label
            {
                Text = "¿Olvido su Contraseña?",
                BackgroundColor = Color.Transparent,
                HorizontalOptions = LayoutOptions.Center,
                TextColor = Colores.BLanco,
                FontSize = Palabras.EnlacesLogin
            };

            circulo = new BoxView
            {
                BackgroundColor = Color.Green,
                CornerRadius = 40,                
                Scale = 20
            };

            Contenido = new StackLayout();

            contenedorLogin = new RelativeLayout();

            // Eventos
            AccesoApp.Clicked += AccesoApp_Clicked;


            ImagenAtras = new TapGestureRecognizer();
            Atras.GestureRecognizers.Add(ImagenAtras);

            Content = AccesoApp;
        }

       

        private async void AccesoApp_Clicked(object sender, EventArgs e)
        {
            uint Time = 180;
            await PaginaPricipal.TranslateTo(0, 0, Time);
            Atras.IsVisible = true; 
            //await AccesoApp.TranslateTo(0, 10, Time);
            //await AccesoApp.TranslateTo(10, 0, Time);
        }

        //Animacion Boton
        async Task AnimacionInicial()
        {
            uint Time = 130;

            await AccesoApp.ScaleTo(0.8, Time); //Valores entre 0 y 1, velocidad en milisegundos
            await AccesoApp.ScaleTo(1, Time);
        }

        //Animacion Circulos
        async Task AnimacionCirculo()
        {
            uint Time = 1000;

            await circulo.ScaleTo(20, Time);
            await circulo.ScaleTo(0, Time);

            circulo.BackgroundColor = Color.Red;

            await circulo.ScaleTo(20, Time);

            await circulo.FadeTo( 0, 700 );

            circulo.IsVisible = false;
        }

        protected override async void OnAppearing()
        {
            base.OnAppearing();

            //await Task.Delay(1000);

            await AnimacionCirculo();

            await AnimacionInicial();
        }

        protected override void OnDisappearing()
        {
            base.OnDisappearing();
        }

        void AgregarVistas()
        {
            contenedorLogin.Children.Add(Fondo,
                Constraint.RelativeToParent((c) => { return 0; }),                              //X
                Constraint.RelativeToParent((c) => { return 0; }),                              //Y
                Constraint.RelativeToParent((c) => { return 375; }),                            //W
                Constraint.RelativeToParent((c) => { return 667; }));                           //H 

            contenedorLogin.Children.Add(logoUtap,
                Constraint.RelativeToParent((c) => { return 20; }),                             //X
                Constraint.RelativeToParent((c) => { return 90; }),                             //Y
                Constraint.RelativeToParent((c) => { return 329; }),                            //W
                Constraint.RelativeToParent((c) => { return 102; }));                           //H 

            contenedorLogin.Children.Add(labelBienvenidos,
                Constraint.RelativeToParent((c) => { return 37.5; }),                           //X
                Constraint.RelativeToParent((c) => { return 228; }),                            //Y
                Constraint.RelativeToParent((c) => { return 300; }),                            //W
                Constraint.RelativeToParent((c) => { return 50; }));                            //H 

            Contenido.Children.Add(Documento);
            Contenido.Children.Add(Codigo);
            Contenido.Children.Add(Contraseña);

            contenedorLogin.Children.Add(Contenido,
                Constraint.RelativeToParent((c) => { return 64; }),                             //X
                Constraint.RelativeToParent((c) => { return 310; }),                            //Y
                Constraint.RelativeToParent((c) => { return 250; }),                            //W
                Constraint.RelativeToParent((c) => { return 120; }));                           //H 

            contenedorLogin.Children.Add(AccesoApp,
                Constraint.RelativeToParent((c) => { return 50; }),                             //X
                Constraint.RelativeToParent((c) => { return 500; }),                            //Y
                Constraint.RelativeToParent((c) => { return 250; }),                            //W
                Constraint.RelativeToParent((c) => { return 42; }));                            //H 

            contenedorLogin.Children.Add(OlvidarContraseña,
                Constraint.RelativeToParent((c) => { return 100; }),                            //X
                Constraint.RelativeToParent((c) => { return 560; }),                            //Y
                Constraint.RelativeToParent((c) => { return 161; }),                            //W
                Constraint.RelativeToParent((c) => { return 15; }));                            //H 

            contenedorLogin.Children.Add(circulo,
                Constraint.RelativeToParent((c) => { return c.Width * 0.45; }),                 //X
                Constraint.RelativeToParent((c) => { return c.Height * 0.45; }));               //Y


            contenedorLogin.Children.Add(PaginaPricipal,
               Constraint.RelativeToParent((c) => { return 0; }),                            //X
               Constraint.RelativeToParent((c) => { return 0; }),                            //Y
               Constraint.RelativeToParent((c) => { return c.Width; }),                            //W
               Constraint.RelativeToParent((c) => { return c.Height; }));                            //H 

            contenedorLogin.Children.Add(Atras,
               Constraint.RelativeToParent((p) => { return p.Width * 0; }),                 //X
               Constraint.RelativeToParent((p) => { return p.Height * 0; }));               //Y

            Content = contenedorLogin;
        }

        void AgregarEventos()
        {

            ImagenAtras.Tapped += ImagenAtras_Tapped;

             async void ImagenAtras_Tapped(object sender, EventArgs e)
            {
                uint Time = 180;
                await PaginaPricipal.TranslateTo(420, 0, Time);
                Atras.IsVisible = false;
                //await AccesoApp.TranslateTo(0, 10, Time);
                //await AccesoApp.TranslateTo(10, 0, Time);
            }

        }
    }
}
